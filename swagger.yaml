openapi: 3.0.0
info:
  description: "This is a sample server Petstore server.  You can find out more
    about     Swagger at [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample,
    you can use the api key `special-key` to test the
    authorization     filters."
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://3.84.235.54:8080/data/2.5/weather
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: Weather
    description: Everything about the weather
paths:
  /weather:
    get:
      tags:
        - weather
      summary: Find weather
      description: Returns the weather of a certain location
      operationId: getWeather
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Weather"
            application/json:
              schema:
                $ref: "#/components/schemas/Weather"
        "400":
          description: Invalid ID supplied
        "404":
          description: Weather not found
      security:
        - api_key: []
  /hello:
    get:
      tags:
        - hello
      summary: Find weather
      description: Returns the weather of a certain location
      operationId: getHello
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Hello"
            application/json:
              schema:
                $ref: "#/components/schemas/Hello"
        "400":
          description: Invalid ID supplied
        "404":
          description: Weather not found
      security:
        - api_key: []
  /auth:
    post:
      tags:
        - user
      summary: user authentication
      description: ""
      operationId: authUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Token"
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Invalid username/password supplied
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://data.2.5.weather/v1
  - url: http://data.2.5.weather/v1
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Hello:
      required:
        - hello
      properties:
        hello:
          type: string
          example: Greetings to you!
    Weather:
      required:
        - lon
        - id
        - coord
        - weather
        - base
        - main
      properties:
        lon:
          type: number
          example: "-0.1257"
        id:
          type: integer
          example: 804
        coord:
          type: object
          example:
            lon: -0.1257
            lat: 51.5085
        weather:
          type: object
          example:
            - id: 804
              main: Clouds
              description: overcast clouds
              icon: 04n
        base:
          type: string
          example: stations
        main:
          type: object
          example:
            temp: 278.83
            feels_like: 274.65
            temp_min: 277.47
            temp_max: 280.13
            pressure: 1028
            humidity: 84
    Token:
      required:
        - token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string